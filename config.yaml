# Глобальные настройки сервера
global_settings:
  prometheus_exporter_port: 8000 # Порт для метрик самого сервера

# Настройки по умолчанию для всех пайплайнов
# Эти значения будут использоваться, если они не переопределены в конкретном пайплайне
default_pipeline_settings:
  # Общие настройки обработки и сети
  generator_target_interval_sec: 0.05 # ~20 FPS генерация, если успевает
  max_chunk_data_size: 8192          # Макс. размер данных в одном чанке (без заголовка)
  socket_timeout: 2.0                # Таймаут для операций с клиентским сокетом (send/recv)

  # Настройки качества изображения и производительности
  gamma: 2.2
  wb_scale: [1.0, 1.0, 1.0]          # R, G, B мультипликаторы баланса белого
  target_fps: 15.0                   # Целевой FPS для адаптивного порога
  min_dirty_rect_threshold: 10       # Минимальный порог для dirty_rect
  max_dirty_rect_threshold: 200      # Максимальный порог
  threshold_adjustment_step_up: 8    # Шаг увеличения порога (если FPS ниже цели)
  threshold_adjustment_step_down: 4  # Шаг уменьшения порога (если FPS выше цели)
  fps_history_size: 10               # Количество последних времен обработки кадра для расчета FPS
  fps_hysteresis_factor: 0.1         # Фактор гистерезиса для адаптации FPS (10% от target_fps)
  
  # Настройки очереди
  frames_queue_max_size: 5           # Максимальный размер очереди кадров между генератором и потребителем
  generator_low_water_mark: 2        # Порог для генератора: если очередь меньше, генерируем активнее

  # Пути к шрифтам (могут быть переопределены для конкретных генераторов)
  font_path: "arial.ttf" # Общий шрифт по умолчанию

  # --- Настройки по умолчанию для SCREEN_CAPTURE ---
  # capture_region должен быть переопределен в конкретном пайплайне, если используется этот режим
  capture_region: null # Пример: {top: 0, left: 0, width: 320, height: 240, mon: 1}

  # --- Настройки по умолчанию для PROMETHEUS_MONITOR ---
  prometheus_url: "http://127.0.0.1:9090/" # URL вашего Prometheus сервера
  prometheus_font_path: "arial.ttf"        # Может использовать общий font_path или свой
  prometheus_update_interval: 1.0          # Как часто PrometheusMonitorGenerator запрашивает данные
  prometheus_history_length: 120           # Длина истории для графиков в PrometheusMonitorGenerator
  prometheus_title_font_size: 18
  prometheus_value_font_size: 36
  prometheus_unit_font_size: 20
  prometheus_colors:                       # Цветовая схема по умолчанию
    background: [10, 15, 25]               # Темно-синий/серый
    foreground: [200, 220, 220]            # Светло-серый/голубой текст
    value_color: [0, 255, 255]             # Яркий циан для значений
    graph_line: [0, 200, 220]              # Цвет линии графика
    grid_lines: [60, 80, 100]              # Цвет линий сетки
    cell_border: [50, 70, 90]              # Цвет границ ячеек
    error: [255, 80, 80]                   # Цвет для ошибок
  # Конфигурация метрик и сетки для Prometheus монитора по умолчанию
  # Эта структура должна соответствовать ожиданиям PrometheusMonitorGenerator
  prometheus_metric_config:
    gpu_load: { title: "GPU LOAD", query: 'avg(nvidia_smi_utilization_gpu_ratio * 100) or on() vector(0)', unit: "%", range: [0, 100], color: [0,255,0] }
    gpu_ram: { title: "GPU RAM", query: 'avg(nvidia_smi_memory_used_bytes / nvidia_smi_memory_total_bytes * 100) or on() vector(0)', unit: "%", range: [0, 100], color: [0,200,255] }
    gpu_temp: { title: "GPU TEMP", query: 'avg(nvidia_smi_temperature_gpu) or on() vector(0)', unit: "°C", range: [20, 100], color: [255,150,0] }
    cpu_load: { title: "CPU LOAD", query: '(1 - avg(rate(windows_cpu_time_total{mode="idle"}[1m]))) * 100 or on() vector(0)', unit: "%", range: [0, 100], color: [255,255,0] } # Для Windows, адаптируйте для Linux/macOS
    ram_usage: { title: "RAM USAGE", query_used: 'windows_os_visible_memory_bytes - windows_os_physical_memory_free_bytes or on() vector(0)', query_total: 'windows_os_visible_memory_bytes or on() vector(0)', unit: "GB", color: [200,100,255] } # query_total используется для определения диапазона
    disk_usage: { title: "DISK R/W", query_write: 'sum(rate(windows_logical_disk_write_bytes_total[1m])) or on() vector(0)', query_read: 'sum(rate(windows_logical_disk_read_bytes_total[1m])) or on() vector(0)', unit: "B/s", color_write: [255,0,255], color_read: [0,255,255] }
  prometheus_grid_layout: # Сетка отображения метрик
    - ["gpu_load", "gpu_ram", "gpu_temp"]
    - ["cpu_load", "ram_usage", "disk_usage"]

  # --- Настройки по умолчанию для CPU_MONITOR ---
  cpu_monitor_font_path: "centaur.ttf"
  cpu_monitor_update_interval: 0.5
  cpu_monitor_history_length: 60
  # cpu_monitor_title_font_size: 24 # Если отличается от prometheus_title_font_size
  # cpu_monitor_subtitle_font_size: 14

  # --- Настройки по умолчанию для BIOS_MONITOR ---
  # bios_font_path: "cour.ttf" # Или другой моноширинный/пиксельный шрифт
  # bios_font_size: 14
  # bios_colors: # Если отличаются от стандартных в bios_drawer.py
  #   background: [0, 0, 170]
  #   foreground: [255, 255, 255]


# Список конфигураций для каждого пайплайна
pipelines:
  - name: "Prometheus_Dashboard_ESP32"
    esp32_port: 8888
    target_width: 320  # Стандартное разрешение для многих TFT
    target_height: 240
    image_source_mode: "PROMETHEUS_MONITOR"
    prometheus_title_font_size: 12
    prometheus_value_font_size: 12
    prometheus_unit_font_size: 12
    prometheus_font_path: "cour.ttf"
    # Переопределяем только то, что отличается от default_pipeline_settings
    # Например, если хотим другую частоту обновления для этого конкретного дашборда:
    # prometheus_update_interval: 0.8
    # Или другую сетку/набор метрик:
    # prometheus_metric_config:
    #   cpu_only: { title: "CPU LOAD", query: '...', unit: "%" }
    # prometheus_grid_layout:
    #   - ["cpu_only"]
    # Можно также переопределить шрифты или цвета для этого пайплайна, если нужно.
    # prometheus_title_font_size: 16 # Чуть меньше для этого экрана

  - name: "ScreenCap_PrimaryMonitor_Mini"
    esp32_port: 8889
    target_width: 160  # Меньшее разрешение для захвата экрана
    target_height: 128
    image_source_mode: "PROMETHEUS_MONITOR"
    # Обязательно указываем область захвата для этого режима
    capture_region: {top: 120, left: 1200, width: 160, height: 128, mon: 1} # Захватываем 480x320 и масштабируем до 240x160
    # Можно изменить параметры производительности для этого пайплайна
    target_fps: 20.0 # Попытаемся достичь более высокого FPS для захвата экрана
    min_dirty_rect_threshold: 15
    max_dirty_rect_threshold: 180
    gamma: 1.9
    wb_scale: [0.99, 0.99, 0.99]
    prometheus_title_font_size: 16
    prometheus_value_font_size: 16
    prometheus_unit_font_size: 16
    prometheus_font_path: "cour.ttf"
    
    prometheus_metric_config:
      gpu_load: 
        title: "Frames per Second"
        query: 'avg_over_time(esp32_consumer_calculated_fps{pipeline_name="Prometheus_Dashboard_ESP32"}[1m]) or on() vector(0)'
        unit: " fps"
        range: [0, 100]
        color: [0,0,255]
    prometheus_grid_layout: # Сетка отображения метрик
      - ["gpu_load"]